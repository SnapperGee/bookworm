{"version":3,"file":"for-you.bundle.min.mjs","mappings":"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","sources":["webpack://Bookworm/webpack/bootstrap","webpack://Bookworm/webpack/runtime/global","webpack://Bookworm/webpack/runtime/publicPath","webpack://Bookworm/./src/main/ts/for-you/for-you-dom.ts","webpack://Bookworm/./src/main/ts/for-you/create-book-result-card.ts","webpack://Bookworm/./src/main/ts/for-you/open-lib-api.ts","webpack://Bookworm/./src/main/ts/for-you.ts","webpack://Bookworm/./src/main/ts/navbar.ts","webpack://Bookworm/./src/main/ts/for-you/clear-subjects-event.ts","webpack://Bookworm/./src/main/ts/for-you/topic-visibility-dropdown-event.ts","webpack://Bookworm/./src/main/ts/for-you/select-all-topics-button-event.ts","webpack://Bookworm/./src/main/ts/for-you/deselect-all-topics-button-event.ts","webpack://Bookworm/./src/main/ts/for-you/topic-checkbox-event.ts","webpack://Bookworm/./src/main/ts/for-you/get-recommendations-event.ts","webpack://Bookworm/./src/main/ts/for-you/clear-results-button-event.ts","webpack://Bookworm/./src/main/ts/for-you/save-results-button-event.ts"],"sourcesContent":["// The require scope\nvar __webpack_require__ = {};\n\n","__webpack_require__.g = (function() {\n\tif (typeof globalThis === 'object') return globalThis;\n\ttry {\n\t\treturn this || new Function('return this')();\n\t} catch (e) {\n\t\tif (typeof window === 'object') return window;\n\t}\n})();","var scriptUrl;\nif (__webpack_require__.g.importScripts) scriptUrl = __webpack_require__.g.location + \"\";\nvar document = __webpack_require__.g.document;\nif (!scriptUrl && document) {\n\tif (document.currentScript)\n\t\tscriptUrl = document.currentScript.src;\n\tif (!scriptUrl) {\n\t\tvar scripts = document.getElementsByTagName(\"script\");\n\t\tif(scripts.length) {\n\t\t\tvar i = scripts.length - 1;\n\t\t\twhile (i > -1 && !scriptUrl) scriptUrl = scripts[i--].src;\n\t\t}\n\t}\n}\n// When supporting browsers where an automatic publicPath is not supported you must specify an output.publicPath manually via configuration\n// or pass an empty string (\"\") and set the __webpack_public_path__ variable from your code to use your own logic.\nif (!scriptUrl) throw new Error(\"Automatic publicPath is not supported in this browser\");\nscriptUrl = scriptUrl.replace(/#.*$/, \"\").replace(/\\?.*$/, \"\").replace(/\\/[^\\/]+$/, \"/\");\n__webpack_require__.p = scriptUrl;","/**\n * @module genre-recommendations-dom\n */\n\nconst NUM_OF_TOPICS: number = 12;\nconst NUM_OF_SUBJECTS: number = 85;\nconst SUBJECT_CHECKBOX_DATASET_PROPS: readonly string[] = Object.freeze([\"openLibQuery\"]);\n\nlet _clearResultsButton: HTMLButtonElement;\n\n/**\n * Retrieves a reference to the `HTMLButtonElement` that clears the open lib query result cards and open lib docs array.\n *\n * @returns The number `HTMLButtonElement` that clears the open lib query result cards and open lib docs array.\n */\nexport const getClearResultsButton = (): HTMLButtonElement =>\n{\n    _clearResultsButton = document.getElementById(\"clearResultsButton\") as HTMLButtonElement;\n\n    if ( ! (_clearResultsButton instanceof HTMLButtonElement))\n    {\n        throw new TypeError(`${getClearResultsButton.name}: ${_clearResultsButton === null ? \"null\" : \"non \" + HTMLButtonElement.name} clear results button.`);\n    }\n\n    return _clearResultsButton;\n}\n\nlet _saveResultsButton: HTMLButtonElement;\n\n/**\n * Retrieves a reference to the `HTMLButtonElement` that saves the open lib query result docs to local storage.\n *\n * @returns The number `HTMLButtonElement` that saves the open lib query result docs to local storage.\n */\nexport const getSaveResultsButton = (): HTMLButtonElement =>\n{\n    _saveResultsButton = document.getElementById(\"saveResultsButton\") as HTMLButtonElement;\n\n    if ( ! (_saveResultsButton instanceof HTMLButtonElement))\n    {\n        throw new TypeError(`${getSaveResultsButton.name}: ${_saveResultsButton === null ? \"null\" : \"non \" + HTMLButtonElement.name} save results button.`);\n    }\n\n    return _saveResultsButton;\n}\n\nlet _clearSubjectsButton: HTMLButtonElement;\n\n/**\n * Retrieves a reference to the `HTMLButtonElement` that unchecks all subject checkboxes.\n *\n * @returns The number `HTMLButtonElement` that unchecks all subject checkboxes.\n */\nexport const getClearSubjectsButton = (): HTMLButtonElement =>\n{\n    _clearSubjectsButton = document.getElementById(\"clearSubjectsButton\") as HTMLButtonElement;\n\n    if ( ! (_clearSubjectsButton instanceof HTMLButtonElement))\n    {\n        throw new TypeError(`${getClearSubjectsButton.name}: ${_clearSubjectsButton === null ? \"null\" : \"non \" + HTMLButtonElement.name} clear subjects button.`);\n    }\n\n    return _clearSubjectsButton;\n}\n\nlet _bookQueryResultCardsContainer: HTMLDivElement;\n\n/**\n * Retrieves a reference to the `HTMLDivElement` used that contains the query result cards.\n *\n * @returns The number `HTMLDivElement` used that contains the query result cards.\n */\nexport const getBookQueryResultCardsContainer = (): HTMLDivElement =>\n{\n    _bookQueryResultCardsContainer = document.getElementById(\"bookQueryResultCards\") as HTMLDivElement;\n\n    if ( ! (_bookQueryResultCardsContainer instanceof HTMLDivElement))\n    {\n        throw new TypeError(`${getBookQueryResultCardsContainer.name}: ${_bookQueryResultCardsContainer === null ? \"null\" : \"non \" + HTMLDivElement.name} book query results card div.`);\n    }\n\n    return _bookQueryResultCardsContainer;\n}\n\nlet _selectAllTopicsButton: HTMLButtonElement;\n\n/**\n * Retrieves a reference to the `HTMLButtonElement` used to select all topic checkboxes and make all their fieldsets visible.\n *\n * @returns The number `HTMLButtonElement` used to select all topic checkboxes and make all their fieldsets visible.\n */\nexport const getSelectAllTopicsButton = (): HTMLButtonElement =>\n{\n    _selectAllTopicsButton = document.getElementById(\"selectAllTopicsButton\") as HTMLButtonElement;\n\n    if ( ! (_selectAllTopicsButton instanceof HTMLButtonElement))\n    {\n        throw new TypeError(`${getSelectAllTopicsButton.name}: ${_selectAllTopicsButton === null ? \"null\" : \"non \" + HTMLButtonElement.name} select all topics button.`);\n    }\n\n    return _selectAllTopicsButton;\n}\n\nlet _deselectAllTopicsButton: HTMLButtonElement;\n\n/**\n * Retrieves a reference to the `HTMLButtonElement` used to deselect all topic checkboxes and make all their fieldsets hidden.\n *\n * @returns The number `HTMLButtonElement` used to deselect all topic checkboxes and make all their fieldsets hidden.\n */\nexport const getDeselectAllTopicsButton = (): HTMLButtonElement =>\n{\n    _deselectAllTopicsButton = document.getElementById(\"deselectAllTopicsButton\") as HTMLButtonElement;\n\n    if ( ! (_deselectAllTopicsButton instanceof HTMLButtonElement))\n    {\n        throw new TypeError(`${getDeselectAllTopicsButton.name}: ${_deselectAllTopicsButton === null ? \"null\" : \"non \" + HTMLButtonElement.name} select all topics button.`);\n    }\n\n    return _deselectAllTopicsButton;\n}\n\nlet _queryResultLimitNumberInput: HTMLInputElement;\n\n/**\n * Retrieves a reference to the number `HTMLInputElement` to limit the number of books returned in fetch query results.\n *\n * @returns The number `HTMLInputElement` to limit the number of books returned in fetch query results.\n */\nexport const getQueryResultLimitNumberInput = (): HTMLInputElement =>\n{\n    _queryResultLimitNumberInput = document.getElementById(\"queryResultLimit\") as HTMLInputElement;\n\n    if ( ! (_queryResultLimitNumberInput instanceof HTMLInputElement))\n    {\n        throw new TypeError(`${getQueryResultLimitNumberInput.name}: ${_queryResultLimitNumberInput === null ? \"null\" : \"non \" + HTMLInputElement.name} query result number input.`);\n    }\n\n    return _queryResultLimitNumberInput;\n}\n\nlet _getRecommendationsButton: HTMLButtonElement;\n\n/**\n * Retrieves a reference to the `HTMLButtonElement` to trigger the recommendations fetch and display.\n *\n * @returns The `HTMLButtonElement` to trigger the recommendations fetch and display.\n */\nexport const getGetRecommendationsButton = (): HTMLButtonElement =>\n{\n    _getRecommendationsButton = document.getElementById(\"getRecommendationsButton\") as HTMLButtonElement;\n\n    if ( ! (_getRecommendationsButton instanceof HTMLButtonElement))\n    {\n        throw new TypeError(`${getGetRecommendationsButton.name}: ${_getRecommendationsButton === null ? \"null\" : \"non \" + HTMLButtonElement.name} get recommendations button.`);\n    }\n\n    return _getRecommendationsButton;\n}\n\nlet _topicVisibilityDropdown: HTMLSelectElement;\n\n/**\n * Retrieves a reference to the visibility `HTMLSelectElement` dropdown to toggle visibility of selected topic fieldsets.\n *\n * @returns The visibility `HTMLSelectElement` dropdown to toggle visibility of selected topic fieldsets.\n */\nexport const getVisibilitySelectDropdown = (): HTMLSelectElement =>\n{\n    _topicVisibilityDropdown = document.getElementById(\"topicVisibilityDropdown\") as HTMLSelectElement;\n\n    if ( ! (_topicVisibilityDropdown instanceof HTMLSelectElement))\n    {\n        throw new TypeError(`${getVisibilitySelectDropdown.name}: ${_topicVisibilityDropdown === null ? \"null\" : \"non \" + HTMLSelectElement.name} topic visibility dropdown.`);\n    }\n\n    return _topicVisibilityDropdown;\n}\n\nlet _topicCheckboxes: HTMLCollectionOf<HTMLInputElement>;\n\n/**\n * Retrieves a reference to the `HTMLInputElement` topic checkboxes to toggle visibility for corresponding topic fieldset.\n *\n * @returns The `HTMLInputElement` topic checkboxes to toggle visibility for corresponding topic fieldset.\n */\nexport const getTopicCheckboxes = (): HTMLCollectionOf<HTMLInputElement> =>\n{\n    _topicCheckboxes = document.getElementsByClassName(\"topicCheckbox\") as HTMLCollectionOf<HTMLInputElement>;\n\n    if ( ! (_topicCheckboxes instanceof HTMLCollection))\n    {\n        throw new TypeError(`${getTopicCheckboxes.name}: ${_topicCheckboxes === null ? \"null\" : \"non \" + HTMLCollection.name} of subject checkboxes.`);\n    }\n\n    if (_topicCheckboxes.length !== NUM_OF_TOPICS)\n    {\n        throw new RangeError(`${getTopicCheckboxes.name}: expected 12 elements, but instead got ${_topicCheckboxes.length}`);\n    }\n\n    for (let index = 0; index < _topicCheckboxes.length; ++index)\n    {\n        const htmlEl = _topicCheckboxes.item(index);\n\n        if ( ! (htmlEl instanceof HTMLInputElement))\n        {\n            throw new TypeError(`${getTopicCheckboxes.name}: ${htmlEl === null ? \"null\" : \"non \" + HTMLInputElement.name} topic checkbox.`);\n        }\n\n        if (htmlEl.type !== \"checkbox\")\n        {\n            throw new TypeError(`${getTopicCheckboxes.name}: topic ${HTMLInputElement.name} with non-checkbox type: \"${htmlEl.type}\"`);\n        }\n    }\n\n    return _topicCheckboxes;\n}\n\nlet _subjectCheckboxes: HTMLCollectionOf<HTMLInputElement>;\n\n/**\n * Retrieves a reference to the `HTMLInputElement` subject checkboxes to select which subjects to fetch and display.\n *\n * @returns The `HTMLInputElement` subject checkboxes to select which subjects to fetch and display.\n */\nexport const getSubjectCheckboxes = (): HTMLCollectionOf<HTMLInputElement> =>\n{\n    _subjectCheckboxes = document.getElementsByClassName(\"subjectCheckbox\") as HTMLCollectionOf<HTMLInputElement>;\n\n    if ( ! (_subjectCheckboxes instanceof HTMLCollection))\n    {\n        throw new TypeError(`${getSubjectCheckboxes.name}: ${_subjectCheckboxes === null ? \"null\" : \"non \" + HTMLCollection.name} of subject checkboxes.`);\n    }\n\n    if (_subjectCheckboxes.length !== NUM_OF_SUBJECTS)\n    {\n        throw new RangeError(`${getSubjectCheckboxes.name}: expected 80 elements, but instead got ${_subjectCheckboxes.length}`);\n    }\n\n    for (let index = 0; index < _subjectCheckboxes.length; ++index)\n    {\n        const htmlEl = _subjectCheckboxes.item(index);\n\n        if ( ! (htmlEl instanceof HTMLInputElement))\n        {\n            throw new TypeError(`${getSubjectCheckboxes.name}: ${htmlEl === null ? \"null\" : \"non \" + HTMLInputElement.name} subject checkbox.`);\n        }\n\n        if (htmlEl.type !== \"checkbox\")\n        {\n            throw new TypeError(`${getSubjectCheckboxes.name}: subject ${HTMLInputElement.name} with non-checkbox type: \"${htmlEl.type}\"`);\n        }\n\n        for (const datasetProp of SUBJECT_CHECKBOX_DATASET_PROPS)\n        {\n            if (htmlEl.dataset[datasetProp] === undefined)\n            {\n                throw new Error(`${getSubjectCheckboxes.name}: undefined dataset property for subject checkbox: \"${datasetProp}\"`);\n            }\n        }\n    }\n\n    return _subjectCheckboxes;\n}\n\nlet _topicFieldsets: HTMLCollectionOf<HTMLFieldSetElement>;\n\n/**\n * Retrieves a reference to the topic `HTMLFieldsetElement`s containing the subject checkbox `HTMLInputElement`s.\n *\n * @returns The topic `HTMLFieldsetElement`s containing the subject checkbox `HTMLInputElement`s.\n */\nexport const getTopicFieldsets = (): HTMLCollectionOf<HTMLFieldSetElement> =>\n{\n    _topicFieldsets = document.getElementById(\"topicFieldsets\")?.getElementsByTagName(\"fieldset\") as HTMLCollectionOf<HTMLFieldSetElement>;\n\n    if ( ! (_topicFieldsets instanceof HTMLCollection))\n    {\n        throw new TypeError(`${getTopicFieldsets.name}: ${_topicFieldsets === null ? \"null\" : \"non \" + HTMLCollection.name} of subject checkboxes.`);\n    }\n\n    if (_topicFieldsets.length !== NUM_OF_TOPICS)\n    {\n        throw new RangeError(`${getTopicFieldsets.name}: expected 12 elements, but instead got ${_topicFieldsets.length}`);\n    }\n\n    for (let index = 0; index < _topicFieldsets.length; ++index)\n    {\n        const htmlEl = _topicFieldsets.item(index);\n\n        if ( ! (htmlEl instanceof HTMLFieldSetElement))\n        {\n            throw new TypeError(`${getTopicFieldsets.name}: ${htmlEl === null ? \"null\" : \"non \" + HTMLFieldSetElement.name} fieldset.`);\n        }\n    }\n\n    return _topicFieldsets;\n}\n","import noImgAvailable from \"../../resource/img/no_image_available.svg\";\nimport { CoverImgSize, OpenLibDoc, createOpenLibBookCoverImgUrl } from \"./open-lib-api\";\n\nexport function createBookResultCard(openLibDoc: OpenLibDoc): HTMLDivElement;\nexport function createBookResultCard(title: string, coverId?: number, author?: string, subjects?: string[]): HTMLDivElement;\nexport function createBookResultCard(titleStringOrOpenLibDoc: string | OpenLibDoc, coverId?: number, author?: string, subjects?: string[]): HTMLDivElement\n{\n    if (typeof titleStringOrOpenLibDoc !== \"string\")\n    {\n        return createBookResultCard( titleStringOrOpenLibDoc.title,\n                                     titleStringOrOpenLibDoc.cover_i,\n                                     titleStringOrOpenLibDoc.author_name[0],\n                                     titleStringOrOpenLibDoc.subject );\n    }\n\n    if (author === undefined || author === null)\n    {\n        throw new TypeError(`${createBookResultCard.name}: ${author} author string.`);\n    }\n\n    if (subjects === undefined || subjects === null)\n    {\n        throw new TypeError(`${createBookResultCard.name}: ${subjects} subjects string array.`);\n    }\n\n    const titlePElement = document.createElement(\"p\");\n    titlePElement.classList.add(\"underline\", \"text-lg\", \"text-center\");\n    titlePElement.textContent = titleStringOrOpenLibDoc;\n\n    const coverImgUrl = coverId ? createOpenLibBookCoverImgUrl(coverId, CoverImgSize.MEDIUM) : noImgAvailable;\n\n    const coverImgElement = document.createElement(\"img\");\n    coverImgElement.classList.add(\"mx-auto\", \"my-2\");\n    coverImgElement.src = coverImgUrl;\n    coverImgElement.alt = coverId ? `${titleStringOrOpenLibDoc} by ${author} cover` : \"No cover image available\";\n\n    const authorPElement = document.createElement(\"p\");\n    authorPElement.classList.add(\"text-center\");\n    authorPElement.textContent = \"by \" + author;\n\n    const subjectsTextPElement = document.createElement(\"p\");\n    subjectsTextPElement.classList.add(\"font-semibold\", \"mt-3\");\n    subjectsTextPElement.innerHTML = 'Subjects<hr class=\"h-px border-0 bg-gray-400\">';\n\n    const subjectsPElement = document.createElement(\"p\");\n    subjectsPElement.style.height = \"7rem\";\n    subjectsPElement.style.overflowY = \"auto\";\n    subjectsPElement.textContent = subjects.join(\", \");\n\n    const cardDivElement = document.createElement(\"div\");\n    cardDivElement.classList.add(\"p-2\", \"cursor-pointer\", \"border\", \"border-solid\", \"border-gray-400\");\n\n    cardDivElement.appendChild(titlePElement);\n    cardDivElement.appendChild(coverImgElement);\n    cardDivElement.appendChild(authorPElement);\n    cardDivElement.appendChild(subjectsTextPElement);\n    cardDivElement.appendChild(subjectsPElement);\n\n    return cardDivElement;\n}\n\nexport default createBookResultCard;\n","const rootUrl: string = \"https://openlibrary.org/search.json?\";\n\nexport interface OpenLibDoc\n{\n    author_name: string[],\n    title: string,\n    subject: string[],\n    cover_i: number\n}\n\nexport interface OpenLibResponse\n{\n    docs: OpenLibDoc[],\n    numFound: number\n}\n\nexport const fetchOpenLib = async (query: string, limit?: number): Promise<OpenLibResponse> =>\n    fetch(`${rootUrl}${query}${limit !== undefined && limit !== null ? \"&limit=\" + String(limit) : \"\"}`).then(openLibResponse => openLibResponse.json());\n\nexport const enum CoverImgSize\n{\n    SMALL = \"S\",\n    MEDIUM = \"M\",\n    LARGE = \"L\"\n}\n\nexport const openLibDocEquals = (anOpenLibDoc: OpenLibDoc, anotherOpenLibDoc: OpenLibDoc | undefined | null): boolean =>\n{\n    if (anotherOpenLibDoc === undefined || anotherOpenLibDoc === null)\n    {\n        return false;\n    }\n\n    if (   anOpenLibDoc.title !== anotherOpenLibDoc.title\n        || anOpenLibDoc.cover_i !== anotherOpenLibDoc.cover_i\n        || anOpenLibDoc.author_name.length !== anotherOpenLibDoc.author_name.length\n        || anOpenLibDoc.subject.length !== anotherOpenLibDoc.subject.length )\n    {\n        return false;\n    }\n\n    return    anOpenLibDoc.author_name.every(authorName => anotherOpenLibDoc.author_name.includes(authorName))\n           && anOpenLibDoc.subject.every(subj => anotherOpenLibDoc.subject.includes(subj));\n};\n\nexport const createOpenLibBookCoverImgUrl = (coverImgID: number, imgSize: CoverImgSize): string => `https://covers.openlibrary.org/b/id/${coverImgID}-${imgSize}.jpg`;\n","import { createNavbar } from \"./navbar\";\nimport { getVisibilitySelectDropdown, getSubjectCheckboxes, getTopicCheckboxes, getClearSubjectsButton, getTopicFieldsets, getGetRecommendationsButton, getQueryResultLimitNumberInput, getSelectAllTopicsButton, getDeselectAllTopicsButton, getBookQueryResultCardsContainer, getClearResultsButton, getSaveResultsButton } from \"./for-you/for-you-dom\";\nimport { topicCheckboxEvent } from \"./for-you/topic-checkbox-event\";\nimport { topicVisibilityDropdownEvent } from \"./for-you/topic-visibility-dropdown-event\";\nimport { selectAllTopicsEvent } from \"./for-you/select-all-topics-button-event\";\nimport { deselectAllTopicsEvent } from \"./for-you/deselect-all-topics-button-event\";\nimport { OpenLibDoc } from \"./for-you/open-lib-api\";\nimport { getRecommendationsEvent } from \"./for-you/get-recommendations-event\";\nimport { clearSubjectsEvent } from \"./for-you/clear-subjects-event\";\nimport { clearResultsButtonEvent } from \"./for-you/clear-results-button-event\";\nimport { saveResultsButtonEvent } from \"./for-you/save-results-button-event\";\n\nconst bodyHTML: HTMLElement = document.querySelector('body') as HTMLElement;\nbodyHTML.prepend(createNavbar());\n\nconst visibilitySelectDropdown: HTMLSelectElement = getVisibilitySelectDropdown();\nconst selectAllTopicsButton: HTMLButtonElement = getSelectAllTopicsButton();\nconst deselectAllTopicsButton: HTMLButtonElement = getDeselectAllTopicsButton();\nconst topicCheckboxes: HTMLCollectionOf<HTMLInputElement> = getTopicCheckboxes();\nconst topicFieldsets: HTMLCollectionOf<HTMLFieldSetElement> = getTopicFieldsets();\nconst queryResultLimit: HTMLInputElement = getQueryResultLimitNumberInput();\nconst subjectCheckboxes: HTMLCollectionOf<HTMLInputElement> = getSubjectCheckboxes();\nconst clearSubjectsButton: HTMLButtonElement = getClearSubjectsButton();\n\nqueryResultLimit.value = \"12\";\nvisibilitySelectDropdown.value = \"show\";\n\nfor (let index = 0; index < topicCheckboxes.length; ++index)\n{\n    const topicCheckbox = topicCheckboxes.item(index);\n\n    if (topicCheckbox !== null)\n    {\n        topicCheckbox.checked = false;\n    }\n}\n\nfor (let index = 0; index < subjectCheckboxes.length; ++index)\n{\n    const subjectCheckbox = subjectCheckboxes.item(index);\n\n    if (subjectCheckbox !== null)\n    {\n        subjectCheckbox.checked = false;\n    }\n}\n\nclearSubjectsEvent(clearSubjectsButton, subjectCheckboxes);\ntopicVisibilityDropdownEvent(visibilitySelectDropdown, topicCheckboxes, topicFieldsets, clearSubjectsButton);\nselectAllTopicsEvent(selectAllTopicsButton, topicCheckboxes, visibilitySelectDropdown, topicFieldsets, clearSubjectsButton);\ndeselectAllTopicsEvent(deselectAllTopicsButton, topicCheckboxes, topicFieldsets, clearSubjectsButton);\ntopicCheckboxEvent(topicCheckboxes, topicFieldsets, visibilitySelectDropdown, clearSubjectsButton);\n\n\nconst getRecommendationsButton: HTMLButtonElement = getGetRecommendationsButton();\nconst bookQueryResultCards: HTMLDivElement = getBookQueryResultCardsContainer();\nconst saveQueryResultsButton: HTMLButtonElement = getSaveResultsButton();\nconst clearResultsButton: HTMLButtonElement = getClearResultsButton();\nconst saveResultsButton: HTMLButtonElement = getSaveResultsButton();\n// To contain the dataset OpenLibrary queries contained in the corresponding checked subject checkbox HTML input elements\nconst openLibBookQueries: Set<string> = new Set();\nconst openLibBookQueryResults: OpenLibDoc[] = [];\n\ngetRecommendationsEvent( getRecommendationsButton,\n                         openLibBookQueries,\n                         subjectCheckboxes,\n                         openLibBookQueryResults,\n                         bookQueryResultCards,\n                         queryResultLimit,\n                         visibilitySelectDropdown,\n                         topicFieldsets,\n                         clearSubjectsButton,\n                         clearResultsButton,\n                         saveResultsButton );\n\nclearResultsButtonEvent(clearResultsButton, bookQueryResultCards, openLibBookQueryResults, saveQueryResultsButton);\nsaveResultsButtonEvent(saveResultsButton, \"openLibDocs\", openLibBookQueryResults);\n","import logoImgPath from \"../resource/img/bookworm-transparent.png\";\n\nexport const createNavbar = (): HTMLDivElement => {\n\n    const brandContainer: HTMLDivElement = document.createElement('div');\n    brandContainer.classList.add('flex', 'items-center')\n\n    const logoImage: HTMLImageElement = document.createElement('img');\n    logoImage.width = 125;\n    logoImage.height = 100;\n    logoImage.src = logoImgPath;\n    logoImage.alt = \"Bookworm logo\";\n\n    const logoBookAnchor: HTMLHeadingElement = document.createElement('h1');\n    logoBookAnchor.classList.add('text-pink', 'font-bold', 'text-4xl');\n    logoBookAnchor.textContent = 'Book';\n\n    const logoWormAnchor: HTMLHeadingElement = document.createElement('h1');\n    logoWormAnchor.classList.add('text-white', 'font-bold', 'text-4xl');\n    logoWormAnchor.textContent = 'Worm';\n\n    brandContainer.appendChild(logoImage);\n    brandContainer.appendChild(logoBookAnchor);\n    brandContainer.appendChild(logoWormAnchor);\n\n    const home: HTMLAnchorElement = document.createElement('a');\n    home.classList.add('inline-block', 'text-white', 'p-4', 'text-xl')\n    home.href = './index.html';\n    home.textContent = 'Home';\n\n    const bestSellers: HTMLAnchorElement = document.createElement('a');\n    bestSellers.classList.add('inline-block', 'text-white', 'p-4', 'text-xl');\n    bestSellers.href = './bestsellers.html';\n    bestSellers.textContent = 'Bestsellers';\n\n    const forYou: HTMLAnchorElement = document.createElement('a');\n    forYou.classList.add('inline-block', 'text-white', 'p-4', 'text-xl', 'whitespace-nowrap');\n    forYou.href = './for-you.html';\n    forYou.textContent = 'For You';\n\n    const bookshelf: HTMLAnchorElement = document.createElement('a');\n    bookshelf.classList.add('inline-block', 'text-white', 'p-4', 'text-xl');\n    bookshelf.href = './bookshelf.html';\n    bookshelf.textContent = 'Bookshelf';\n\n    const currentPage = window.location.pathname;\n\n    for (const headerAnchor of [home, bestSellers, forYou, bookshelf])\n    {\n        if (headerAnchor.href.endsWith(currentPage))\n        {\n            headerAnchor.classList.add('font-bold');\n        }\n    }\n\n    const navLinks = document.createElement(\"div\");\n    navLinks.classList.add('flex', 'flex-nowrap');\n\n    navLinks.appendChild(home);\n    navLinks.appendChild(bestSellers);\n    navLinks.appendChild(forYou);\n    navLinks.appendChild(bookshelf);\n\n    const headerContainer: HTMLDivElement = document.createElement('nav') as HTMLDivElement;\n    headerContainer.classList.add('flex', 'flex-wrap', 'justify-between', 'items-center', 'w-full', 'bg-green', 'px-8');\n    headerContainer.id = 'header';\n\n    headerContainer.appendChild(brandContainer);\n    headerContainer.appendChild(navLinks);\n\n    return headerContainer;\n}\n","export const clearSubjectsEvent = ( htmlButton: HTMLButtonElement,\n                                    htmlCheckboxesInput: HTMLCollectionOf<HTMLInputElement> ): void =>\n{\n    htmlButton.addEventListener(\"click\", () => {\n        for (let index = 0; index < htmlCheckboxesInput.length; ++index)\n        {\n            const htmlCheckbox = htmlCheckboxesInput.item(index);\n\n            if (htmlCheckbox?.checked === true)\n            {\n                htmlCheckbox.checked = false;\n            }\n        }\n    });\n}\n","export const topicVisibilityDropdownEvent = (\n    htmlSelectElement: HTMLSelectElement,\n    htmlCheckboxInputCollection: HTMLCollectionOf<HTMLInputElement>,\n    htmlFieldsetCollection: HTMLCollectionOf<HTMLFieldSetElement>,\n    htmlClearSubjectsButton: HTMLButtonElement ): void =>\n{\n    htmlSelectElement.addEventListener(\"change\", () => {\n\n        if (htmlSelectElement.value === \"hide\" && ! htmlClearSubjectsButton.classList.contains(\"hidden\"))\n        {\n            htmlClearSubjectsButton.classList.add(\"hidden\")\n        }\n        else if (htmlSelectElement.value === \"show\" && htmlClearSubjectsButton.classList.contains(\"hidden\"))\n        {\n            for (let index = 0; index < htmlCheckboxInputCollection.length; ++index)\n            {\n                const checkboxInput = htmlCheckboxInputCollection.item(index);\n\n                if (checkboxInput?.checked === true)\n                {\n                    htmlClearSubjectsButton.classList.remove(\"hidden\")\n                }\n            }\n        }\n\n        for (let index = 0; index < htmlCheckboxInputCollection.length; ++index)\n        {\n            const topicCheckboxHTMLInputElement = htmlCheckboxInputCollection.item(index);\n\n            const htmlFieldsetElement = topicCheckboxHTMLInputElement !== null ? htmlFieldsetCollection.namedItem(topicCheckboxHTMLInputElement.name) : null;\n\n            if (htmlSelectElement.value === \"hide\" && htmlFieldsetElement !== null && ! htmlFieldsetElement.classList.contains(\"hidden\"))\n            {\n                htmlFieldsetElement.classList.add(\"hidden\");\n            }\n            else if (htmlSelectElement.value === \"show\" && topicCheckboxHTMLInputElement?.checked === true && htmlFieldsetElement !== null && htmlFieldsetElement.classList.contains(\"hidden\"))\n            {\n                htmlFieldsetElement.classList.remove(\"hidden\");\n            }\n        }\n    });\n};\n","export const selectAllTopicsEvent = (\n    htmlButton: HTMLButtonElement,\n    htmlCheckboxInputs: HTMLCollectionOf<HTMLInputElement>,\n    htmlFieldsetVisibilitySelect: HTMLSelectElement,\n    htmlFieldSets: HTMLCollectionOf<HTMLFieldSetElement>,\n    htmlClearSubjectsButton: HTMLButtonElement ): void =>\n{\n    htmlButton.addEventListener(\"click\", () => {\n        for (let index = 0; index < htmlCheckboxInputs.length; ++index)\n        {\n            const htmlCheckBox = htmlCheckboxInputs.item(index);\n\n            if (htmlCheckBox?.checked === false)\n            {\n                htmlCheckBox.checked = true;\n            }\n        }\n\n        if (htmlFieldsetVisibilitySelect.value === \"show\")\n        {\n            for (let index = 0; index < htmlFieldSets.length; ++index)\n            {\n                const htmlFieldset = htmlFieldSets.item(index);\n\n                if (htmlFieldset?.classList.contains(\"hidden\"))\n                {\n                    htmlFieldset.classList.remove(\"hidden\")\n                }\n            }\n        }\n\n        if (htmlFieldsetVisibilitySelect.value === \"show\" && htmlClearSubjectsButton.classList.contains(\"hidden\"))\n        {\n            htmlClearSubjectsButton.classList.remove(\"hidden\")\n        }\n    });\n};\n\nexport default selectAllTopicsEvent;\n","export const deselectAllTopicsEvent = (\n    htmlButton: HTMLButtonElement,\n    htmlCheckboxInputs: HTMLCollectionOf<HTMLInputElement>,\n    htmlFieldSets: HTMLCollectionOf<HTMLFieldSetElement>,\n    htmlClearSubjectsButton: HTMLButtonElement ): void =>\n{\n    htmlButton.addEventListener(\"click\", () => {\n        for (let index = 0; index < htmlCheckboxInputs.length; ++index)\n        {\n            const htmlCheckBox = htmlCheckboxInputs.item(index);\n\n            if (htmlCheckBox?.checked === true)\n            {\n                htmlCheckBox.checked = false;\n            }\n        }\n\n        for (let index = 0; index < htmlFieldSets.length; ++index)\n        {\n            const htmlFieldset = htmlFieldSets.item(index);\n\n            if (htmlFieldset !== null && ! htmlFieldset.classList.contains(\"hidden\"))\n            {\n                htmlFieldset.classList.add(\"hidden\")\n            }\n        }\n\n        if ( ! htmlClearSubjectsButton.classList.contains(\"hidden\"))\n        {\n            htmlClearSubjectsButton.classList.add(\"hidden\")\n        }\n    });\n};\n\nexport default deselectAllTopicsEvent;\n","/**\n * Function that associates `HTMLInputElement` checkboxes to toggle the visibility of `HTMLFieldsetElement`s.\n *\n * @param checkboxHTMLInputElements The collection of `HTMLInputElement` checkboxes to check for checked/unchecked.\n *\n * @param htmlFieldsetElements The collection of `HTMLFieldsetElement`s to make visible/hidden.\n *\n * @param htmlSelectElement The `HTMLSelectElement` to override whether to make a fieldset visible or not.\n */\nexport const topicCheckboxEvent = (\n    checkboxHTMLInputElements: HTMLCollectionOf<HTMLInputElement>,\n    htmlFieldsetElements: HTMLCollectionOf<HTMLFieldSetElement>,\n    htmlSelectElement: HTMLSelectElement,\n    clearSubjectsButton: HTMLButtonElement ): void =>\n{\n    for (let index = 0; index < checkboxHTMLInputElements.length; ++index)\n    {\n        const topicCheckboxHTMLInputElement = checkboxHTMLInputElements.item(index);\n\n        topicCheckboxHTMLInputElement?.addEventListener(\"change\", () => {\n            const topicFieldset: HTMLFieldSetElement | null = htmlFieldsetElements.namedItem(topicCheckboxHTMLInputElement.name);\n\n            // If checkbox for topic is checked and visibility is set to \"show\", make topic field set visible\n            if (topicCheckboxHTMLInputElement.checked === true && htmlSelectElement.value === \"show\")\n            {\n                if (topicFieldset !== null && topicFieldset.classList.contains(\"hidden\"))\n                {\n                    topicFieldset.classList.remove(\"hidden\")\n                }\n            }\n            // If checkbox is unchecked make topic fieldset hidden\n            else\n            {\n                if (topicFieldset !== null && ! topicFieldset.classList.contains(\"hidden\"))\n                {\n                    topicFieldset.classList.add(\"hidden\")\n                }\n\n            }\n\n            checkAllCheckedStatus:\n                for (let i = 0; i < checkboxHTMLInputElements.length; ++i)\n                {\n                    const otherTopicCheckboxHTMLInputElement = checkboxHTMLInputElements.item(i);\n\n                    if (otherTopicCheckboxHTMLInputElement?.checked === true && htmlSelectElement.value === \"show\" && clearSubjectsButton.classList.contains(\"hidden\"))\n                    {\n                        clearSubjectsButton.classList.remove(\"hidden\");\n                        break checkAllCheckedStatus;\n                    }\n\n                    if ( ! clearSubjectsButton.classList.contains(\"hidden\"))\n                    {\n                        clearSubjectsButton.classList.add(\"hidden\");\n                    }\n                }\n        });\n    }\n};\n","import { type OpenLibDoc } from \"./open-lib-api\";\nimport { fetchOpenLib } from \"./open-lib-api\";\nimport { createBookResultCard } from \"./create-book-result-card\";\n\nexport const getRecommendationsEvent = (\n    htmlGetRecommendationsButton: HTMLButtonElement,\n    queryStrings: Set<string>,\n    checkBoxes: HTMLCollectionOf<HTMLInputElement>,\n    openLibDocs: OpenLibDoc[],\n    resultsCardsHTMLDiv: HTMLDivElement,\n    requestLimitHTMLInput: HTMLInputElement,\n    topicFieldsetsVisibilityHTMLSelect: HTMLSelectElement,\n    topicHTMLFieldsets: HTMLCollectionOf<HTMLFieldSetElement>,\n    clearSubjectsHTMLButton: HTMLButtonElement,\n    clearResultsHTMLButton: HTMLButtonElement,\n    saveResultsHTMLButton: HTMLButtonElement ): void =>\n{\n    htmlGetRecommendationsButton.addEventListener(\"click\", async () => {\n\n        queryStrings.clear();\n\n        for (let index = 0; index < checkBoxes.length; ++index)\n        {\n            const subjectCheckBox = checkBoxes.item(index);\n\n            const openLibQuery = subjectCheckBox?.dataset.openLibQuery;\n\n            if (subjectCheckBox?.checked === true && openLibQuery !== undefined)\n            {\n                queryStrings.add(openLibQuery);\n            }\n        }\n\n        if (queryStrings.size === 0)\n        {\n            return;\n        }\n\n        if (topicFieldsetsVisibilityHTMLSelect.value === \"show\")\n        {\n            topicFieldsetsVisibilityHTMLSelect.value = \"hide\";\n        }\n\n        for (let index = 0; index < topicHTMLFieldsets.length; ++index)\n        {\n            const topicFieldset = topicHTMLFieldsets.item(index);\n\n            if (topicFieldset !== null && ! topicFieldset.classList.contains(\"hidden\"))\n            {\n                topicFieldset.classList.add(\"hidden\");\n            }\n        }\n\n        if ( ! clearSubjectsHTMLButton.classList.contains(\"hidden\"))\n        {\n            clearSubjectsHTMLButton.classList.add(\"hidden\")\n        }\n\n        if (resultsCardsHTMLDiv.children.length !== 0)\n        {\n            resultsCardsHTMLDiv.innerHTML = \"\";\n        }\n\n        openLibDocs.length = 0;\n\n        await Promise.all(Array.from(queryStrings).map(async openLibQuery => {\n            await fetchOpenLib(openLibQuery, parseInt(requestLimitHTMLInput.value)).then(openLibResponse => openLibDocs.push(...openLibResponse.docs));\n        }));\n\n        openLibDocs.forEach(openLibDoc => {\n            const openLibResponseCard = createBookResultCard(openLibDoc);\n            resultsCardsHTMLDiv.appendChild(openLibResponseCard);\n        });\n\n        if (clearResultsHTMLButton.classList.contains(\"hidden\"))\n        {\n            clearResultsHTMLButton.classList.remove(\"hidden\");\n        }\n\n        if (saveResultsHTMLButton.classList.contains(\"hidden\"))\n        {\n            saveResultsHTMLButton.classList.remove(\"hidden\");\n        }\n    });\n};\n","import { OpenLibDoc } from \"./open-lib-api\";\n\nexport const clearResultsButtonEvent = ( clearResultsHTMLButton: HTMLButtonElement,\n                                         openLibQueryResultsCardsHTMLDiv: HTMLDivElement,\n                                         openLibDocsArray: OpenLibDoc[],\n                                         sveResultsHTMLButton: HTMLButtonElement ): void =>\n{\n    clearResultsHTMLButton.addEventListener(\"click\", () => {\n        if (openLibQueryResultsCardsHTMLDiv.children.length !== 0)\n        {\n            openLibQueryResultsCardsHTMLDiv.innerHTML = \"\";\n        }\n\n        if (openLibDocsArray.length !== 0)\n        {\n            openLibDocsArray.length = 0;\n        }\n\n        if ( ! sveResultsHTMLButton.classList.contains(\"hidden\"))\n        {\n            sveResultsHTMLButton.classList.add(\"hidden\");\n        }\n\n        clearResultsHTMLButton.classList.add(\"hidden\");\n    });\n};\n","import { type OpenLibDoc, openLibDocEquals } from \"./open-lib-api\";\n\nexport const saveResultsButtonEvent = (saveResultsHTMLButton: HTMLButtonElement, localStorageKey: string, openLibDocs: OpenLibDoc[]): void =>\n{\n    saveResultsHTMLButton.addEventListener(\"click\", () => {\n        if (openLibDocs.length === 0)\n        {\n            return;\n        }\n\n        const savedOpenLibDocsString: string | null = localStorage.getItem(localStorageKey);\n\n        let savedOpenLibDocs: OpenLibDoc[] = savedOpenLibDocsString !== null ? JSON.parse(savedOpenLibDocsString) : [];\n\n        if (savedOpenLibDocs.length === 0)\n        {\n            savedOpenLibDocs = openLibDocs;\n        }\n        else\n        {\n            savedOpenLibDocs.push(...openLibDocs.filter(openLibDoc => savedOpenLibDocs.every(savedOpenLibDoc => ! openLibDocEquals(openLibDoc, savedOpenLibDoc))));\n        }\n\n        localStorage.setItem(localStorageKey, JSON.stringify(savedOpenLibDocs));\n    });\n};\n\nexport default saveResultsButtonEvent;\n"],"names":["__webpack_require__","g","globalThis","this","Function","e","window","scriptUrl","importScripts","location","document","currentScript","src","scripts","getElementsByTagName","length","i","Error","replace","p","SUBJECT_CHECKBOX_DATASET_PROPS","Object","freeze","_clearResultsButton","getClearResultsButton","getElementById","HTMLButtonElement","TypeError","name","_saveResultsButton","getSaveResultsButton","_clearSubjectsButton","getClearSubjectsButton","_bookQueryResultCardsContainer","getBookQueryResultCardsContainer","HTMLDivElement","_selectAllTopicsButton","getSelectAllTopicsButton","_deselectAllTopicsButton","getDeselectAllTopicsButton","_queryResultLimitNumberInput","getQueryResultLimitNumberInput","HTMLInputElement","_getRecommendationsButton","getGetRecommendationsButton","_topicVisibilityDropdown","getVisibilitySelectDropdown","HTMLSelectElement","_topicCheckboxes","getTopicCheckboxes","getElementsByClassName","HTMLCollection","RangeError","index","htmlEl","item","type","_subjectCheckboxes","getSubjectCheckboxes","datasetProp","undefined","dataset","_topicFieldsets","getTopicFieldsets","HTMLFieldSetElement","createBookResultCard","titleStringOrOpenLibDoc","coverId","author","subjects","title","cover_i","author_name","subject","titlePElement","createElement","classList","add","textContent","coverImgUrl","coverImgElement","alt","authorPElement","subjectsTextPElement","innerHTML","subjectsPElement","style","height","overflowY","join","cardDivElement","appendChild","querySelector","prepend","brandContainer","logoImage","width","logoBookAnchor","logoWormAnchor","home","href","bestSellers","forYou","bookshelf","currentPage","pathname","headerAnchor","endsWith","navLinks","headerContainer","id","createNavbar","visibilitySelectDropdown","selectAllTopicsButton","deselectAllTopicsButton","topicCheckboxes","topicFieldsets","queryResultLimit","subjectCheckboxes","clearSubjectsButton","value","topicCheckbox","checked","subjectCheckbox","htmlCheckboxesInput","htmlSelectElement","htmlCheckboxInputCollection","htmlFieldsetCollection","htmlClearSubjectsButton","addEventListener","htmlCheckbox","contains","checkboxInput","remove","topicCheckboxHTMLInputElement","htmlFieldsetElement","namedItem","htmlButton","htmlCheckboxInputs","htmlFieldsetVisibilitySelect","htmlFieldSets","htmlCheckBox","htmlFieldset","selectAllTopicsEvent","deselectAllTopicsEvent","checkboxHTMLInputElements","htmlFieldsetElements","topicFieldset","checkAllCheckedStatus","otherTopicCheckboxHTMLInputElement","topicCheckboxEvent","getRecommendationsButton","bookQueryResultCards","saveQueryResultsButton","clearResultsButton","saveResultsButton","openLibBookQueries","Set","openLibBookQueryResults","queryStrings","checkBoxes","openLibDocs","resultsCardsHTMLDiv","requestLimitHTMLInput","topicFieldsetsVisibilityHTMLSelect","topicHTMLFieldsets","clearSubjectsHTMLButton","clearResultsHTMLButton","saveResultsHTMLButton","async","clear","subjectCheckBox","openLibQuery","size","children","Promise","all","Array","from","map","query","limit","fetch","String","then","openLibResponse","json","fetchOpenLib","parseInt","push","docs","forEach","openLibDoc","openLibResponseCard","openLibQueryResultsCardsHTMLDiv","openLibDocsArray","sveResultsHTMLButton","clearResultsButtonEvent","localStorageKey","savedOpenLibDocsString","localStorage","getItem","savedOpenLibDocs","JSON","parse","filter","every","savedOpenLibDoc","anOpenLibDoc","anotherOpenLibDoc","authorName","includes","subj","setItem","stringify","saveResultsButtonEvent"],"sourceRoot":""}